0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/node', '/usr/bin/npm', 'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.32
4 verbose node symlink /usr/bin/node
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /home/netai/.npm/3a52ce78-.lock
11 verbose tar pack [ '/home/netai/.npm/x-mvc/1.1.3/package.tgz', '.' ]
12 verbose tarball /home/netai/.npm/x-mvc/1.1.3/package.tgz
13 verbose folder .
14 info prepublish x-mvc@1.1.3
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. /home/netai/.npm/1f1177db-tar.lock
17 silly lockFile 6fb751dc-etai-npm-x-mvc-1-1-3-package-tgz tar:///home/netai/.npm/x-mvc/1.1.3/package.tgz
18 verbose lock tar:///home/netai/.npm/x-mvc/1.1.3/package.tgz /home/netai/.npm/6fb751dc-etai-npm-x-mvc-1-1-3-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile 6fb751dc-etai-npm-x-mvc-1-1-3-package-tgz tar:///home/netai/.npm/x-mvc/1.1.3/package.tgz
22 silly lockFile 6fb751dc-etai-npm-x-mvc-1-1-3-package-tgz tar:///home/netai/.npm/x-mvc/1.1.3/package.tgz
23 silly lockFile a8216594-me-netai-npm-x-mvc-1-1-3-package /home/netai/.npm/x-mvc/1.1.3/package
24 verbose lock /home/netai/.npm/x-mvc/1.1.3/package /home/netai/.npm/a8216594-me-netai-npm-x-mvc-1-1-3-package.lock
25 silly lockFile a8216594-me-netai-npm-x-mvc-1-1-3-package /home/netai/.npm/x-mvc/1.1.3/package
26 silly lockFile a8216594-me-netai-npm-x-mvc-1-1-3-package /home/netai/.npm/x-mvc/1.1.3/package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'x-mvc',
29 silly publish   version: '1.1.3',
29 silly publish   description: 'This is simple and light node.js mvc structure just install and create controller,model,view and your project is ready',
29 silly publish   main: 'index.js',
29 silly publish   dependencies:
29 silly publish    { 'connect-redis': '1.4.7',
29 silly publish      express: '3.16.2',
29 silly publish      orm: '2.1.19',
29 silly publish      mysql: '2.4.2',
29 silly publish      xss: '0.0.9' },
29 silly publish   devDependencies: {},
29 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
29 silly publish   repository: { type: 'git', url: 'git://github.com/netai/x-mvc.git' },
29 silly publish   keywords: [ 'express', 'orm', 'mvc', 'structure' ],
29 silly publish   author:
29 silly publish    { name: 'Netai Nayek',
29 silly publish      email: 'net.nayek@gmail.com',
29 silly publish      url: 'http://netai-nayek.blogspot.com/' },
29 silly publish   license: 'MIT',
29 silly publish   bugs: { url: 'https://github.com/netai/x-mvc/issues' },
29 silly publish   homepage: 'https://github.com/netai/x-mvc',
29 silly publish   readme: 'x-mvc\n===============\nThis is simple and light node.js mvc structure just install and create \ncontroller,model,view and your project is ready\nin this mvc we have added more feture like:\n\n* create slug\n* flush message\n* more comfortable structure\n* form validation\n\nthis mvc have some separet part like\n\n* Database(default mysql)\n* App structure\n* Router\n* Separate modules\n* ...\n\nSo hope this library help someone like me.\n\nAny ideas are appreciated.\n\n##Features\n\n* MVC\n* This library just help you to structure your code\n* No Express or ORM hack\n* Config Express and ORM by yourself (Fully control)\n\n##Dependencies\n\nBy default:\n\n* [Express](https://github.com/visionmedia/express) ^4.0.0\n* [ORM](https://github.com/dresende/node-orm2) ^2.1.5\n\nYou can specify those dependencies version by option, please refer to [this](#options)\n\n##Installation\n\n\tnpm install x-mvc --save\n\nDatabase package\n\n\tfor mysql no need to proccess bellow step (default database mysql)\n\n\tnpm install <your database package>\n\n    //example\n    npm install mysql\n\nRefer to ORM document [Connecting to Database](https://github.com/dresende/node-orm2/wiki/Connecting-to-Database)\n\n##App structure\n\n\t/\n\t\tmodels/\t\t\t\t\t\t-- all of your models here\n\t\tcontrollers/\t\t\t\t-- all of your controllers here\n\t\tviews/\n\t\tconfig/\n\t\t\texpress.js\t\t\t\t-- your express config\n\t\t\torm.js\t\t\t\t\t-- your orm config\n\t\t\troutes.js\t\t\t\t-- router\n\t\t\tsettings.js\t\t\t\t-- app settings (ip, port, database, ...)\n\t\tapp.js\t\t\t\t\t\t-- root\n\nPlease check example\n\n##How to use\n\nPlease check example or follow these document\n\n###Init\n\n```js\nrequire(x-mvc)(function(err){\n\tif(err) {\n\t\tconsole.log(err);\n\t\treturn;\n\t}\n\tconsole.log(\'done\');\n});\n```\n\n###Models\n\nA model file should be like this\n\n```js\nmodule.exports = function (orm, db) {\n    //define your orm model here\n};\n```\n\nExample:\n\n\tmodels/post.js\n\n```js\nmodule.exports = function (orm, db) {\n\tvar Post = db.define(\'post\', {\n\t\ttitle:      { type: \'text\' },\n\t\tcontent:    { type: \'text\' }\n    });\n};\n```\n\nCheck ORM document [Defining Models](https://github.com/dresende/node-orm2/wiki/Defining-Models)\n\n\n###Controllers\n\nA controller file should be like this\n\n```js\nmodule.exports = {\n    //define your controller here\n};\n```\n\nExample:\n\n\tcontrollers/post.js\n\n```js\nmodule.exports = {\n\thome: function(req, res, next){\n\t\tres.send(\'home page\');\n\t},\n    get: function(req, res, next) {\n        req.models.post.find(function(err, data) {\n            res.send(data);\n        });\n    },\n    create: function(req, res, next) {\n        req.models.post.create({\n            title: \'title\',\n            content: \'content\'\n        }, function(err, result) {\n            res.send(result);\n        });\n    }\n};\n```\n**Note:** you can list all of your models in req.models, check more [here](#notes)\n\n###Settings\n\n\tconfig/settings.js\n\nA settings file should be like this\n\n```js\nmodule.exports = {\n    mode1: { //development\n        ip: <ip>,\n        port: <port>,\n        db: // orm database setting object\n    },\n    mode2: { //production\n        ip: <ip>,\n        port: <port>,\n        db: // orm database setting object\n    }\n};\n```\n\nExample:\n\n```js\nmodule.exports = {\n    development: {\n        ip: \'127.0.0.1\',\n        port: 8080,\n        db: {\n            host: \'127.0.0.1\',\n            port: 3306,\n            protocol: \'mysql\',\n            user: \'root\',\n            password: \'123456789\',\n            database: \'test\',\n            connectionLimit: 100\n        }\n    },\n    production: {\n        ip: \'127.0.0.1\',\n        port: 8080,\n        db: {\n            host: \'127.0.0.1\',\n            port: 3306,\n            protocol: \'mysql\',\n            user: \'root\',\n            password: \'123456789\',\n            database: \'test\',\n            connectionLimit: 100\n        }\n    }\n};\n```\n\n**Note**: You should set your NODE_ENV variable (development or production), or you can by pass by send directly the mode option when init, check [here](#options)\n\nCheck ORM document [Connecting to Database](https://github.com/dresende/node-orm2/wiki/Connecting-to-Database)\n\n###Express config\n\n\tconfig/express.js\n\nA express config file should be like this\n\n```js\nmodule.exports = function(app, express) {\n    //any express config here\n};\n```\n\nExample:\n\n```js\nmodule.exports = function(app, express) {\n\tapp.set(\'view engine\', \'ejs\');\n};\n```\n\nCheck Express document [api](http://expressjs.com/api.html)\n\n**Note**:\n\n* As you see there is no ```views``` folder in app structure, so create and manage by yourself\n* Library will start a server automatically, so no need this kind of this stuff\n\n```js\nhttp.createServer(app).listen(function(){});\n```\n\n###ORM config\n\n\tconfig/dbConfig.js\n\nA orm config file should be like this\n\n```js\nmodule.exports = function(orm, db) {\n    //any orm config here\n};\n```\n\nExample:\n\n```js\nmodule.exports = function(orm, db) {\n    db.settings.set(\'test\', \'testing data\');\n};\n```\n\nCheck ORM document [Settings](https://github.com/dresende/node-orm2/wiki/Settings)\n\n**Note**: Library will [sync database](https://github.com/dresende/node-orm2/wiki/Synching-and-Dropping-Models#wiki-synching) automatically.\n\n###Routes config\n\n\tconfig/routes.js\n\nA routes config file should be like this\n\n```js\nmodule.exports = function(app, controllers) {\n\t//routes here\n};\n```\n\nExample:\n\n```js\nmodule.exports = function(app, controllers) {\n    app.get(    \'/\'       , controllers.post.home);\n    app.get(    \'/post\'   , controllers.post.get);\n    app.post(   \'/post\'   , controllers.post.create);\n};\n```\n\n##Options\n\n```js\nrequire(x-mvc)({\n\tmode: \'development\',           //default: production\n\tpath: __dirname,               //default: auto detect\n    express: require(\'express\'),   //specify your express version\n    orm: require(\'orm\')            //specify your orm version\n}, callback);\n```\n\nExample:\n\n```js\n\nrequire(x-mvc)({\n    mode: \'development\',\n    path: \'/Code/Project\',\n}, callback);\n```\n\n##Return object\n\n``express``\n\n``orm``\n\n``server`` web server instance\n\n``database`` orm database instance\n\n``app`` express app instance\n\n``settings`` the current settings\n\n``mode`` the current mode\n\n```js\nrequire(just-mvc)(functiom(err, mvc) {\n    mvc.express;\n    mvc.orm;\n    mvc.server;\n    mvc.database;\n    mvc.app;\n    mvc.settings;\n    mvc.mode;\n});\n```\n\n##Notes\n\nFor your convenience, you can get\n\n* ``models``: all the orm models\n* ``settings``: the running setings\n* ``mode``: the running mode\n\n###from express req\n\n```js\nfunction (req, res, next) {\n    req.models;\n    req.settings;\n    req.mode;\n}\n```\n\n###from express config file\n\n```js\n//config/express.js\nmodule.exports = function(app, express, mvc) {\n    mvc.mode\n    mvc.settings\n};\n```\n\n###from orm config file\n```js\n//config/orm.js\nmodule.exports = function(orm, db, mvc) {\n    mvc.mode\n    mvc.settings\n};\n```\n###New Feature\n\nFlush Message\n\n\tfor flush message follow bellow step\n\twhen you redirect or show view then first save this two data in session\n\t\n\treq.session.msg="message";\n\treq.session.css_class="css-class";\n\t\n\tnext send bellow variable to view and show\n\t\n\tmsg=req.utility.flushMsg(req)\n\nSlug\n\n\tcreate a slug follow bellow step\n\tslug=req.utility.slug(product_name)\n\nform validation\n\n        var form_validation = new req.library.form_validation(<input json data>);//initialize\n\tform_validation.addRule(\'<field_name>\', \'<field label>\', \'rule\');//add all rule\n        form_validation.run(function(err, input){<code here>});//validate\n        err: get validation error message\n        input: get validation input data\n        \n        Vlidation rule::\n        required: validates that a value exists\n\n\t\tminLength[l]: validates that a value length is at minimum equal to l\n\n\t\tmaxLength[l]: validates that a value length is at maximum equal to l\n\n\t\texactLength[l]: validates that a value length is exactly l\n\n\t\tgreaterThan[l]: validate that a value is greater than l\n\n\t\tlessThan[l]: validates that a value is less than l\n\n\t\talpha: validates that a value contains only alphabet letters [A-Za-z]\n\n\t\talphaNumeric: validates that a value contains only alphabet letters or numbers [A-Za-z0-9]\n\n\t\talphaNumericDash: validates that a value contains only alphabet letters, numbers or dash [A-Za-z0-9-]\n\n\t\tnumeric: validates that a value is numeric [0-9]\n\n\t\tinteger: validates that a value is an integer\n\n\t\tdecimal: validates that a value is a decimal number\n\n\t\tnatural: validates that a value is a natural number >= 0\n\n\t\tnaturalNoZero: validates that a value is a natural number and greater than zero\n\n\t\temail: validates that a value looks like an email\n\n\t\tregex[s]: validates that a value matches the given regular expressions s\n\n\t\tmatches[f]: validates that a value matches a value of another field f\n\n\t\tsanitize: sanitize a value against any possible xss attack\n',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   gitHead: 'ab4cdfb7aecbecf6f4ee9a1866df0828e6e6c870',
29 silly publish   _id: 'x-mvc@1.1.3',
29 silly publish   _shasum: '6dd510860822a3f24c9eabe8d254239f25c00073',
29 silly publish   _from: '.' }
30 verbose request where is /x-mvc
31 verbose request registry https://registry.npmjs.org/
32 verbose request id f1e8245215dc9a61
33 verbose url raw /x-mvc
34 verbose url resolving [ 'https://registry.npmjs.org/', './x-mvc' ]
35 verbose url resolved https://registry.npmjs.org/x-mvc
36 verbose request where is https://registry.npmjs.org/x-mvc
37 info trying registry request attempt 1 at 22:50:54
38 http PUT https://registry.npmjs.org/x-mvc
39 http 403 https://registry.npmjs.org/x-mvc
40 verbose headers { date: 'Sun, 05 Oct 2014 17:20:57 GMT',
40 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
40 verbose headers   'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=60',
40 verbose headers   'content-length': '14731',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   'x-served-by': 'cache-syd1620-SYD',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1412529656.499889,VS0,VE719',
40 verbose headers   'keep-alive': 'timeout=10, max=50',
40 verbose headers   connection: 'Keep-Alive' }
41 error publish Failed PUT 403
42 error Error: forbidden cannot modify pre-existing version: 1.1.3
42 error old={"name":"x-mvc","version":"1.1.3","description":"This is simple and light node.js mvc structure just install and create controller,model,view and your project is ready","main":"index.js","dependencies":{"connect-redis":"1.4.7","express":"3.16.2","orm":"2.1.19","mysql":"2.4.2","xss":"0.0.9"},"devDependencies":{},"scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"git://github.com/netai/x-mvc.git"},"keywords":["express","orm","mvc","structure"],"author":{"name":"Netai Nayek","email":"net.nayek@gmail.com","url":"http://netai-nayek.blogspot.com/"},"license":"MIT","bugs":{"url":"https://github.com/netai/x-mvc/issues"},"homepage":"https://github.com/netai/x-mvc","gitHead":"ab4cdfb7aecbecf6f4ee9a1866df0828e6e6c870","_id":"x-mvc@1.1.3","_shasum":"ed00fc7fa9aa02461e43c10299baa5bca52e1ae0","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"nnayek","email":"net.nayek@gmail.com"},"maintainers":[{"name":"nnayek","email":"net.nayek@gmail.com"}],"dist":{"shasum":"ed00fc7fa9aa02461e43c10299baa5bca52e1ae0","tarball":"http://registry.npmjs.org/x-mvc/-/x-mvc-1.1.3.tgz"}}
42 error new={"name":"x-mvc","version":"1.1.3","description":"This is simple and light node.js mvc structure just install and create controller,model,view and your project is ready","main":"index.js","dependencies":{"connect-redis":"1.4.7","express":"3.16.2","orm":"2.1.19","mysql":"2.4.2","xss":"0.0.9"},"devDependencies":{},"scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"git://github.com/netai/x-mvc.git"},"keywords":["express","orm","mvc","structure"],"author":{"name":"Netai Nayek","email":"net.nayek@gmail.com","url":"http://netai-nayek.blogspot.com/"},"license":"MIT","bugs":{"url":"https://github.com/netai/x-mvc/issues"},"homepage":"https://github.com/netai/x-mvc","readme":"x-mvc\u000a===============\u000aThis is simple and light node.js mvc structure just install and create \u000acontroller,model,view and your project is ready\u000ain this mvc we have added more feture like:\u000a\u000a* create slug\u000a* flush message\u000a* more comfortable structure\u000a* form validation\u000a\u000athis mvc have some separet part like\u000a\u000a* Database(default mysql)\u000a* App structure\u000a* Router\u000a* Separate modules\u000a* ...\u000a\u000aSo hope this library help someone like me.\u000a\u000aAny ideas are appreciated.\u000a\u000a##Features\u000a\u000a* MVC\u000a* This library just help you to structure your code\u000a* No Express or ORM hack\u000a* Config Express and ORM by yourself (Fully control)\u000a\u000a##Dependencies\u000a\u000aBy default:\u000a\u000a* [Express](https://github.com/visionmedia/express) ^4.0.0\u000a* [ORM](https://github.com/dresende/node-orm2) ^2.1.5\u000a\u000aYou can specify those dependencies version by option, please refer to [this](#options)\u000a\u000a##Installation\u000a\u000a\u0009npm install x-mvc --save\u000a\u000aDatabase package\u000a\u000a\u0009for mysql no need to proccess bellow step (default database mysql)\u000a\u000a\u0009npm install <your database package>\u000a\u000a    //example\u000a    npm install mysql\u000a\u000aRefer to ORM document [Connecting to Database](https://github.com/dresende/node-orm2/wiki/Connecting-to-Database)\u000a\u000a##App structure\u000a\u000a\u0009/\u000a\u0009\u0009models/\u0009\u0009\u0009\u0009\u0009\u0009-- all of your models here\u000a\u0009\u0009controllers/\u0009\u0009\u0009\u0009-- all of your controllers here\u000a\u0009\u0009views/\u000a\u0009\u0009config/\u000a\u0009\u0009\u0009express.js\u0009\u0009\u0009\u0009-- your express config\u000a\u0009\u0009\u0009orm.js\u0009\u0009\u0009\u0009\u0009-- your orm config\u000a\u0009\u0009\u0009routes.js\u0009\u0009\u0009\u0009-- router\u000a\u0009\u0009\u0009settings.js\u0009\u0009\u0009\u0009-- app settings (ip, port, database, ...)\u000a\u0009\u0009app.js\u0009\u0009\u0009\u0009\u0009\u0009-- root\u000a\u000aPlease check example\u000a\u000a##How to use\u000a\u000aPlease check example or follow these document\u000a\u000a###Init\u000a\u000a```js\u000arequire(x-mvc)(function(err){\u000a\u0009if(err) {\u000a\u0009\u0009console.log(err);\u000a\u0009\u0009return;\u000a\u0009}\u000a\u0009console.log('done');\u000a});\u000a```\u000a\u000a###Models\u000a\u000aA model file should be like this\u000a\u000a```js\u000amodule.exports = function (orm, db) {\u000a    //define your orm model here\u000a};\u000a```\u000a\u000aExample:\u000a\u000a\u0009models/post.js\u000a\u000a```js\u000amodule.exports = function (orm, db) {\u000a\u0009var Post = db.define('post', {\u000a\u0009\u0009title:      { type: 'text' },\u000a\u0009\u0009content:    { type: 'text' }\u000a    });\u000a};\u000a```\u000a\u000aCheck ORM document [Defining Models](https://github.com/dresende/node-orm2/wiki/Defining-Models)\u000a\u000a\u000a###Controllers\u000a\u000aA controller file should be like this\u000a\u000a```js\u000amodule.exports = {\u000a    //define your controller here\u000a};\u000a```\u000a\u000aExample:\u000a\u000a\u0009controllers/post.js\u000a\u000a```js\u000amodule.exports = {\u000a\u0009home: function(req, res, next){\u000a\u0009\u0009res.send('home page');\u000a\u0009},\u000a    get: function(req, res, next) {\u000a        req.models.post.find(function(err, data) {\u000a            res.send(data);\u000a        });\u000a    },\u000a    create: function(req, res, next) {\u000a        req.models.post.create({\u000a            title: 'title',\u000a            content: 'content'\u000a        }, function(err, result) {\u000a            res.send(result);\u000a        });\u000a    }\u000a};\u000a```\u000a**Note:** you can list all of your models in req.models, check more [here](#notes)\u000a\u000a###Settings\u000a\u000a\u0009config/settings.js\u000a\u000aA settings file should be like this\u000a\u000a```js\u000amodule.exports = {\u000a    mode1: { //development\u000a        ip: <ip>,\u000a        port: <port>,\u000a        db: // orm database setting object\u000a    },\u000a    mode2: { //production\u000a        ip: <ip>,\u000a        port: <port>,\u000a        db: // orm database setting object\u000a    }\u000a};\u000a```\u000a\u000aExample:\u000a\u000a```js\u000amodule.exports = {\u000a    development: {\u000a        ip: '127.0.0.1',\u000a        port: 8080,\u000a        db: {\u000a            host: '127.0.0.1',\u000a            port: 3306,\u000a            protocol: 'mysql',\u000a            user: 'root',\u000a            password: '123456789',\u000a            database: 'test',\u000a            connectionLimit: 100\u000a        }\u000a    },\u000a    production: {\u000a        ip: '127.0.0.1',\u000a        port: 8080,\u000a        db: {\u000a            host: '127.0.0.1',\u000a            port: 3306,\u000a            protocol: 'mysql',\u000a            user: 'root',\u000a            password: '123456789',\u000a            database: 'test',\u000a            connectionLimit: 100\u000a        }\u000a    }\u000a};\u000a```\u000a\u000a**Note**: You should set your NODE_ENV variable (development or production), or you can by pass by send directly the mode option when init, check [here](#options)\u000a\u000aCheck ORM document [Connecting to Database](https://github.com/dresende/node-orm2/wiki/Connecting-to-Database)\u000a\u000a###Express config\u000a\u000a\u0009config/express.js\u000a\u000aA express config file should be like this\u000a\u000a```js\u000amodule.exports = function(app, express) {\u000a    //any express config here\u000a};\u000a```\u000a\u000aExample:\u000a\u000a```js\u000amodule.exports = function(app, express) {\u000a\u0009app.set('view engine', 'ejs');\u000a};\u000a```\u000a\u000aCheck Express document [api](http://expressjs.com/api.html)\u000a\u000a**Note**:\u000a\u000a* As you see there is no ```views``` folder in app structure, so create and manage by yourself\u000a* Library will start a server automatically, so no need this kind of this stuff\u000a\u000a```js\u000ahttp.createServer(app).listen(function(){});\u000a```\u000a\u000a###ORM config\u000a\u000a\u0009config/dbConfig.js\u000a\u000aA orm config file should be like this\u000a\u000a```js\u000amodule.exports = function(orm, db) {\u000a    //any orm config here\u000a};\u000a```\u000a\u000aExample:\u000a\u000a```js\u000amodule.exports = function(orm, db) {\u000a    db.settings.set('test', 'testing data');\u000a};\u000a```\u000a\u000aCheck ORM document [Settings](https://github.com/dresende/node-orm2/wiki/Settings)\u000a\u000a**Note**: Library will [sync database](https://github.com/dresende/node-orm2/wiki/Synching-and-Dropping-Models#wiki-synching) automatically.\u000a\u000a###Routes config\u000a\u000a\u0009config/routes.js\u000a\u000aA routes config file should be like this\u000a\u000a```js\u000amodule.exports = function(app, controllers) {\u000a\u0009//routes here\u000a};\u000a```\u000a\u000aExample:\u000a\u000a```js\u000amodule.exports = function(app, controllers) {\u000a    app.get(    '/'       , controllers.post.home);\u000a    app.get(    '/post'   , controllers.post.get);\u000a    app.post(   '/post'   , controllers.post.create);\u000a};\u000a```\u000a\u000a##Options\u000a\u000a```js\u000arequire(x-mvc)({\u000a\u0009mode: 'development',           //default: production\u000a\u0009path: __dirname,               //default: auto detect\u000a    express: require('express'),   //specify your express version\u000a    orm: require('orm')            //specify your orm version\u000a}, callback);\u000a```\u000a\u000aExample:\u000a\u000a```js\u000a\u000arequire(x-mvc)({\u000a    mode: 'development',\u000a    path: '/Code/Project',\u000a}, callback);\u000a```\u000a\u000a##Return object\u000a\u000a``express``\u000a\u000a``orm``\u000a\u000a``server`` web server instance\u000a\u000a``database`` orm database instance\u000a\u000a``app`` express app instance\u000a\u000a``settings`` the current settings\u000a\u000a``mode`` the current mode\u000a\u000a```js\u000arequire(just-mvc)(functiom(err, mvc) {\u000a    mvc.express;\u000a    mvc.orm;\u000a    mvc.server;\u000a    mvc.database;\u000a    mvc.app;\u000a    mvc.settings;\u000a    mvc.mode;\u000a});\u000a```\u000a\u000a##Notes\u000a\u000aFor your convenience, you can get\u000a\u000a* ``models``: all the orm models\u000a* ``settings``: the running setings\u000a* ``mode``: the running mode\u000a\u000a###from express req\u000a\u000a```js\u000afunction (req, res, next) {\u000a    req.models;\u000a    req.settings;\u000a    req.mode;\u000a}\u000a```\u000a\u000a###from express config file\u000a\u000a```js\u000a//config/express.js\u000amodule.exports = function(app, express, mvc) {\u000a    mvc.mode\u000a    mvc.settings\u000a};\u000a```\u000a\u000a###from orm config file\u000a```js\u000a//config/orm.js\u000amodule.exports = function(orm, db, mvc) {\u000a    mvc.mode\u000a    mvc.settings\u000a};\u000a```\u000a###New Feature\u000a\u000aFlush Message\u000a\u000a\u0009for flush message follow bellow step\u000a\u0009when you redirect or show view then first save this two data in session\u000a\u0009\u000a\u0009req.session.msg=\"message\";\u000a\u0009req.session.css_class=\"css-class\";\u000a\u0009\u000a\u0009next send bellow variable to view and show\u000a\u0009\u000a\u0009msg=req.utility.flushMsg(req)\u000a\u000aSlug\u000a\u000a\u0009create a slug follow bellow step\u000a\u0009slug=req.utility.slug(product_name)\u000a\u000aform validation\u000a\u000a        var form_validation = new req.library.form_validation(<input json data>);//initialize\u000a\u0009form_validation.addRule('<field_name>', '<field label>', 'rule');//add all rule\u000a        form_validation.run(function(err, input){<code here>});//validate\u000a        err: get validation error message\u000a        input: get validation input data\u000a        \u000a        Vlidation rule::\u000a        required: validates that a value exists\u000a\u000a\u0009\u0009minLength[l]: validates that a value length is at minimum equal to l\u000a\u000a\u0009\u0009maxLength[l]: validates that a value length is at maximum equal to l\u000a\u000a\u0009\u0009exactLength[l]: validates that a value length is exactly l\u000a\u000a\u0009\u0009greaterThan[l]: validate that a value is greater than l\u000a\u000a\u0009\u0009lessThan[l]: validates that a value is less than l\u000a\u000a\u0009\u0009alpha: validates that a value contains only alphabet letters [A-Za-z]\u000a\u000a\u0009\u0009alphaNumeric: validates that a value contains only alphabet letters or numbers [A-Za-z0-9]\u000a\u000a\u0009\u0009alphaNumericDash: validates that a value contains only alphabet letters, numbers or dash [A-Za-z0-9-]\u000a\u000a\u0009\u0009numeric: validates that a value is numeric [0-9]\u000a\u000a\u0009\u0009integer: validates that a value is an integer\u000a\u000a\u0009\u0009decimal: validates that a value is a decimal number\u000a\u000a\u0009\u0009natural: validates that a value is a natural number >= 0\u000a\u000a\u0009\u0009naturalNoZero: validates that a value is a natural number and greater than zero\u000a\u000a\u0009\u0009email: validates that a value looks like an email\u000a\u000a\u0009\u0009regex[s]: validates that a value matches the given regular expressions s\u000a\u000a\u0009\u0009matches[f]: validates that a value matches a value of another field f\u000a\u000a\u0009\u0009sanitize: sanitize a value against any possible xss attack\u000a","readmeFilename":"README.md","gitHead":"ab4cdfb7aecbecf6f4ee9a1866df0828e6e6c870","_id":"x-mvc@1.1.3","_shasum":"6dd510860822a3f24c9eabe8d254239f25c00073","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"nnayek","email":"net.nayek@gmail.com"},"maintainers":[{"name":"nnayek","email":"net.nayek@gmail.com"}],"dist":{"shasum":"6dd510860822a3f24c9eabe8d254239f25c00073","tarball":"http://registry.npmjs.org/x-mvc/-/x-mvc-1.1.3.tgz"}}: x-mvc
42 error     at RegClient.<anonymous> (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:308:14)
42 error     at Request._callback (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:246:65)
42 error     at Request.self.callback (/usr/lib/node_modules/npm/node_modules/request/request.js:236:22)
42 error     at Request.emit (events.js:98:17)
42 error     at Request.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:1142:14)
42 error     at Request.emit (events.js:117:20)
42 error     at IncomingMessage.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:1096:12)
42 error     at IncomingMessage.emit (events.js:117:20)
42 error     at _stream_readable.js:943:16
42 error     at process._tickCallback (node.js:419:13)
43 error If you need help, you may report this *entire* log,
43 error including the npm and node versions, at:
43 error     <http://github.com/npm/npm/issues>
44 error System Linux 2.6.32-66-generic
45 error command "/usr/bin/node" "/usr/bin/npm" "publish"
46 error cwd /home/netai/lab/node/xcart/node_modules/x-mvc
47 error node -v v0.10.32
48 error npm -v 1.4.28
49 verbose exit [ 1, true ]
