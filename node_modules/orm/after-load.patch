diff --git a/lib/ChainFind.js b/lib/ChainFind.js
index 1876020..a7020cb 100644
--- a/lib/ChainFind.js
+++ b/lib/ChainFind.js
@@ -127,7 +127,9 @@ function ChainFind(Model, opts) {
 				var pending = data.length;
 
 				var createInstance = function (idx) {
+				    console.log("zz", data);
 				    opts.newInstance(data[idx], function (err, instance) {
+				    		console.log("zzz", err, instance);
 				        data[idx] = instance;
 
 				        if (--pending === 0) {
diff --git a/lib/Instance.js b/lib/Instance.js
index 03e7318..fe1ca7a 100755
--- a/lib/Instance.js
+++ b/lib/Instance.js
@@ -620,9 +620,9 @@ function Instance(Model, opts) {
 		}
 	}
 
-	Hook.wait(instance, opts.hooks.afterLoad, function () {
+	Hook.wait(instance, opts.hooks.afterLoad, function (err) {
 		process.nextTick(function () {
-			emitEvent("ready");
+			emitEvent("ready", err);
 		});
 	});
 
diff --git a/lib/Model.js b/lib/Model.js
index 83fb19d..7452ee5 100644
--- a/lib/Model.js
+++ b/lib/Model.js
@@ -106,10 +106,12 @@ function Model(opts) {
 			extend_associations    : extend_associations,
 			association_properties : association_properties
 		});
-		instance.on("ready", function () {
+		instance.on("ready", function (err) {
+			console.log("ready", instance);
 			if (--pending > 0) return;
 			if (typeof cb === "function") {
-				return cb(instance);
+				if (err) return cb(err);
+				return cb(null, instance);
 			}
 		});
 		if (model_fields !== null) {
@@ -125,12 +127,13 @@ function Model(opts) {
 					Hook.wait(instance, opts.hooks.afterAutoFetch, function (err) {
 						if (--pending > 0) return;
 						if (typeof cb === "function") {
-							return cb(instance);
+							return cb(null, instance);
 						}
 					});
 				});
 			});
 		});
+		console.log("xxx",instance);
 		return instance;
 	};
 
@@ -315,8 +318,8 @@ function Model(opts) {
 					autoFetchLimit : options.autoFetchLimit,
 					cascadeRemove  : options.cascadeRemove
 				}, cb);
-			}, function (instance) {
-				return cb(null, instance);
+			}, function (err, instance) {
+				return cb(err, instance);
 			});
 		});
 
@@ -412,6 +415,7 @@ function Model(opts) {
 					cache      : options.cache,
 					save_check : opts.settings.get("instance.cacheSaveCheck")
 				}, function (cb) {
+					console.log("yyy", data);
 					return createInstance(data, {
 						uid            : uid,
 						autoSave       : opts.autoSave,
@@ -421,8 +425,8 @@ function Model(opts) {
 						extra          : options.extra,
 						extra_info     : options.extra_info
 					}, cb);
-				}, function (instance) {
-					return cb(null, instance);
+				}, function (err, instance) {
+					return cb(err, instance);
 				});
 			}
 		});
@@ -575,7 +579,10 @@ function Model(opts) {
 				is_new    : true,
 				autoSave  : opts.autoSave,
 				autoFetch : false
-			}, function () {
+			}, function (err, instance) {
+				if (err) {
+					return cb(err);
+				}
 				Instances[idx].save(function (err) {
 					if (err) {
 						err.index = idx;
diff --git a/lib/Singleton.js b/lib/Singleton.js
index c68ec2d..12076af 100644
--- a/lib/Singleton.js
+++ b/lib/Singleton.js
@@ -11,16 +11,16 @@ exports.clear = function (key) {
 
 exports.get = function (key, opts, createCb, returnCb) {
 	if (opts && opts.cache === false) {
-		return createCb(returnCb);
+		return createCb(null, returnCb);
 	}
 	if (map.hasOwnProperty(key)) {
 		if (opts && opts.save_check && typeof map[key].o.saved === "function" && !map[key].o.saved()) {
 			// if not saved, don't return it, fetch original from db
-			return createCb(returnCb);
+			return createCb(null, returnCb);
 		} else if (map[key].t !== null && map[key].t <= Date.now()) {
 			delete map[key];
 		} else  {
-			return returnCb(map[key].o);
+			return returnCb(null, map[key].o);
 		}
 	}
 
@@ -29,6 +29,6 @@ exports.get = function (key, opts, createCb, returnCb) {
 			o : value,
 			t : (opts && typeof opts.cache === "number" ? Date.now() + (opts.cache * 1000) : null)
 		};
-		return returnCb(map[key].o);
+		return returnCb(null, map[key].o);
 	});
 };
diff --git a/test/integration/association-extend.js b/test/integration/association-extend.js
index 6f03f4f..8f8ab8f 100644
--- a/test/integration/association-extend.js
+++ b/test/integration/association-extend.js
@@ -35,6 +35,7 @@ describe("Model.extendsTo()", function() {
 	before(function (done) {
 		helper.connect(function (connection) {
 			db = connection;
+			db.settings.set('instance.cache', false);
 
 			return done();
 		});
diff --git a/test/integration/hook.js b/test/integration/hook.js
index 946ada1..ec670f4 100644
--- a/test/integration/hook.js
+++ b/test/integration/hook.js
@@ -465,25 +465,51 @@ describe("Hook", function() {
 		});
 
 		describe("if hook method has 1 argument", function () {
-			var afterLoad = false;
+			describe("and completes without errors", function () {
+				var afterLoad = false;
 
-			before(setup({
-				afterLoad : function (next) {
-					setTimeout(function () {
-						afterLoad = true;
+				before(setup({
+					afterLoad : function (next) {
+						setTimeout(function () {
+							afterLoad = true;
 
-						return next();
-					}.bind(this), 200);
-				}
-			}));
+							return next();
+						}.bind(this), 200);
+					}
+				}));
 
-			it("should wait for hook to finish", function (done) {
-				this.timeout(500);
+				it("should wait for hook to finish", function (done) {
+					this.timeout(500);
 
-				Person.create([{ name: "John Doe" }], function (err, items) {
-					afterLoad.should.be.true;
+					Person.create([{ name: "John Doe" }], function (err, items) {
+						afterLoad.should.be.true;
 
-					return done();
+						return done();
+					});
+				});
+			});
+
+			describe("and completes with errors", function () {
+				var afterLoad = false;
+
+				before(setup({
+					afterLoad : function (next) {
+						setTimeout(function () {
+							afterLoad = true;
+
+							return next(new Error("broken"));
+						}.bind(this), 200);
+					}
+				}));
+
+				it("the errors should bubble up", function (done) {
+					this.timeout(500);
+
+					Person.create([{ name: "John Doe" }], function (err, items) {
+						should.exist(err);
+
+						return done();
+					});
 				});
 			});
 		});
